[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ensure_csrf_cookie",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "_backend..venv.bin.activate_this",
        "description": "_backend..venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "_backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "_backend.config.asgi",
        "description": "_backend.config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "_backend.config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv(\n    'SECRET_KEY', 'django-insecure-default-key-for-development')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "SECRET_KEY = os.getenv(\n    'SECRET_KEY', 'django-insecure-default-key-for-development')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'corsheaders',",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "ROOT_URLCONF = 'configurls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),\n        'PORT': os.getenv('DB_PORT'),\n    }\n}",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}\n# CORS settings\nCORS_ALLOWED_ORIGINS = [",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    'http://localhost:8000',\n    'http://127.0.0.1:8000',\n    'http://localhost:5500',  # For VS Code Live Server\n]\nCORS_ALLOW_CREDENTIALS = True",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "_backend.config.settings",
        "description": "_backend.config.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True",
        "detail": "_backend.config.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "_backend.config.urls",
        "description": "_backend.config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/users/', include('users.urls')),\n]\n# Serve media files in development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL,\n                          document_root=settings.MEDIA_ROOT)",
        "detail": "_backend.config.urls",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "_backend.users.apps",
        "description": "_backend.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "_backend.users.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "_backend.users.models",
        "description": "_backend.users.models",
        "peekOfCode": "class User(AbstractUser):\n    \"\"\"Custom user model that extends Django's AbstractUser\"\"\"\n    email = models.EmailField(unique=True)\n    bio = models.TextField(blank=True)\n    profile_image = models.ImageField(\n        upload_to='profile_images/', blank=True, null=True)\n    date_joined = models.DateTimeField(auto_now_add=True)\n    last_login = models.DateTimeField(auto_now=True)\n    # Add additional fields as needed\n    phone_number = models.CharField(max_length=15, blank=True)",
        "detail": "_backend.users.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "_backend.users.serializers",
        "description": "_backend.users.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user objects\"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'first_name',\n                  'last_name', 'bio', 'profile_image', 'date_joined')\n        read_only_fields = ('id', 'date_joined')\nclass RegisterSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user registration\"\"\"\n    password = serializers.CharField(",
        "detail": "_backend.users.serializers",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "kind": 6,
        "importPath": "_backend.users.serializers",
        "description": "_backend.users.serializers",
        "peekOfCode": "class RegisterSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user registration\"\"\"\n    password = serializers.CharField(\n        write_only=True, required=True, validators=[validate_password])\n    password2 = serializers.CharField(write_only=True, required=True)\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'password', 'password2')\n    def validate(self, attrs):\n        if attrs['password'] != attrs['password2']:",
        "detail": "_backend.users.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "_backend.users.serializers",
        "description": "_backend.users.serializers",
        "peekOfCode": "class LoginSerializer(serializers.Serializer):\n    \"\"\"Serializer for user login\"\"\"\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(required=True, write_only=True)",
        "detail": "_backend.users.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "_backend.users.serializers",
        "description": "_backend.users.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user objects\"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'first_name',\n                  'last_name', 'bio', 'profile_image', 'date_joined')\n        read_only_fields = ('id', 'date_joined')\nclass RegisterSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user registration\"\"\"",
        "detail": "_backend.users.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "_backend.users.urls",
        "description": "_backend.users.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/', RegisterView.as_view(), name='register'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('me/', UserDetailView.as_view(), name='user-detail'),\n]",
        "detail": "_backend.users.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "_backend.users.views",
        "description": "_backend.users.views",
        "peekOfCode": "class RegisterView(APIView):\n    \"\"\"View for user registration\"\"\"\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = RegisterSerializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.save()\n            return Response({\n                \"user\": UserSerializer(user).data,\n                \"message\": \"User created successfully\"",
        "detail": "_backend.users.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "_backend.users.views",
        "description": "_backend.users.views",
        "peekOfCode": "class LoginView(APIView):\n    \"\"\"View for user login\"\"\"\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = LoginSerializer(data=request.data)\n        if serializer.is_valid():\n            email = serializer.validated_data['email']\n            password = serializer.validated_data['password']\n            user = authenticate(request, username=email, password=password)\n            if user is not None:",
        "detail": "_backend.users.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "_backend.users.views",
        "description": "_backend.users.views",
        "peekOfCode": "class LogoutView(APIView):\n    \"\"\"View for user logout\"\"\"\n    def post(self, request):\n        logout(request)\n        return Response({\"message\": \"Logout successful\"})\nclass UserDetailView(APIView):\n    \"\"\"View for retrieving and updating user details\"\"\"\n    def get(self, request):\n        serializer = UserSerializer(request.user)\n        return Response(serializer.data)",
        "detail": "_backend.users.views",
        "documentation": {}
    },
    {
        "label": "UserDetailView",
        "kind": 6,
        "importPath": "_backend.users.views",
        "description": "_backend.users.views",
        "peekOfCode": "class UserDetailView(APIView):\n    \"\"\"View for retrieving and updating user details\"\"\"\n    def get(self, request):\n        serializer = UserSerializer(request.user)\n        return Response(serializer.data)\n    def put(self, request):\n        serializer = UserSerializer(\n            request.user, data=request.data, partial=True)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "_backend.users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "_backend.manage",
        "description": "_backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "_backend.manage",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backend\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "backend..venv.bin.activate_this",
        "description": "backend..venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "backend..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.config.asgi",
        "description": "backend.config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'corsheaders',",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),\n        'PORT': os.getenv('DB_PORT'),\n    }\n}",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.User'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}\n# CORS settings\nCORS_ALLOWED_ORIGINS = [",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    'http://localhost:8000',\n    'http://127.0.0.1:8000',\n    'http://localhost:5500',  # For VS Code Live Server\n    'http://127.0.0.1:5500',\n]\n# Add these settings\nCSRF_COOKIE_SAMESITE = 'Lax'  # or 'None' if using cross-site\nSESSION_COOKIE_SAMESITE = 'Lax'  # or 'None' if using cross-site\n# If using cross-site requests with SameSite=None, you must also use secure cookies",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SAMESITE",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "CSRF_COOKIE_SAMESITE = 'Lax'  # or 'None' if using cross-site\nSESSION_COOKIE_SAMESITE = 'Lax'  # or 'None' if using cross-site\n# If using cross-site requests with SameSite=None, you must also use secure cookies\nif DEBUG:\n    CSRF_COOKIE_SECURE = False\n    SESSION_COOKIE_SECURE = False\nelse:\n    CSRF_COOKIE_SECURE = True\n    SESSION_COOKIE_SECURE = True\n# Ensure CSRF is properly configured",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SAMESITE",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "SESSION_COOKIE_SAMESITE = 'Lax'  # or 'None' if using cross-site\n# If using cross-site requests with SameSite=None, you must also use secure cookies\nif DEBUG:\n    CSRF_COOKIE_SECURE = False\n    SESSION_COOKIE_SECURE = False\nelse:\n    CSRF_COOKIE_SECURE = True\n    SESSION_COOKIE_SECURE = True\n# Ensure CSRF is properly configured\nCSRF_TRUSTED_ORIGINS = [",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    'http://127.0.0.1:5500',\n    'http://localhost:5500',\n]\n# Make sure CORS allows credentials\nCORS_ALLOW_CREDENTIALS = True\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# If you're using email as username, you might need a custom backend",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# If you're using email as username, you might need a custom backend\n# or ensure your ModelBackend is properly handling email authentication",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "backend.config.settings",
        "description": "backend.config.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# If you're using email as username, you might need a custom backend\n# or ensure your ModelBackend is properly handling email authentication",
        "detail": "backend.config.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.config.urls",
        "description": "backend.config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/users/', include('users.urls')),\n]\n# Serve media files in development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL,\n                          document_root=settings.MEDIA_ROOT)",
        "detail": "backend.config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.config.wsgi",
        "description": "backend.config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.config.wsgi",
        "documentation": {}
    },
    {
        "label": "HomeConfig",
        "kind": 6,
        "importPath": "backend.home.apps",
        "description": "backend.home.apps",
        "peekOfCode": "class HomeConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"home\"",
        "detail": "backend.home.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.users.migrations.0001_initial",
        "description": "backend.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"User\",\n            fields=[\n                (",
        "detail": "backend.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.users.migrations.0002_user_role_user_status",
        "description": "backend.users.migrations.0002_user_role_user_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"users\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"user\",\n            name=\"role\",\n            field=models.CharField(\n                choices=[(\"user\", \"User\"), (\"admin\", \"Admin\"), (\"editor\", \"Editor\")],",
        "detail": "backend.users.migrations.0002_user_role_user_status",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "backend.users.apps",
        "description": "backend.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"users\"",
        "detail": "backend.users.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.users.models",
        "description": "backend.users.models",
        "peekOfCode": "class User(AbstractUser):\n    \"\"\"Custom user model that extends Django's AbstractUser\"\"\"\n    email = models.EmailField(unique=True)\n    bio = models.TextField(blank=True, null=True)\n    profile_image = models.ImageField(\n        upload_to='profile_images/', blank=True, null=True)\n    date_joined = models.DateTimeField(auto_now_add=True)\n    last_login = models.DateTimeField(auto_now=True)\n    # Add additional fields as needed\n    phone_number = models.CharField(max_length=20, blank=True, null=True)",
        "detail": "backend.users.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "backend.users.serializers",
        "description": "backend.users.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user objects\"\"\"\n    password = serializers.CharField(\n        write_only=True, required=False, validators=[validate_password])\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'first_name', 'last_name',\n                  'role', 'status', 'profile_image', 'last_login',\n                  'date_joined', 'bio', 'phone_number', 'location', 'website', 'password')\n        read_only_fields = ('id', 'username', 'email',",
        "detail": "backend.users.serializers",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "kind": 6,
        "importPath": "backend.users.serializers",
        "description": "backend.users.serializers",
        "peekOfCode": "class RegisterSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user registration\"\"\"\n    password = serializers.CharField(\n        write_only=True, required=True, validators=[validate_password])\n    password2 = serializers.CharField(write_only=True, required=True)\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'password', 'password2')\n    def validate(self, attrs):\n        if attrs['password'] != attrs['password2']:",
        "detail": "backend.users.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "backend.users.serializers",
        "description": "backend.users.serializers",
        "peekOfCode": "class LoginSerializer(serializers.Serializer):\n    \"\"\"Serializer for user login\"\"\"\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(required=True, write_only=True)",
        "detail": "backend.users.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "backend.users.serializers",
        "description": "backend.users.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for user objects\"\"\"\n    password = serializers.CharField(\n        write_only=True, required=False, validators=[validate_password])\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'first_name', 'last_name',\n                  'role', 'status', 'profile_image', 'last_login',\n                  'date_joined', 'bio', 'phone_number', 'location', 'website', 'password')",
        "detail": "backend.users.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.users.urls",
        "description": "backend.users.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'users', UserViewSet, basename='user')\n# The API URLs are determined automatically by the router\n# and additional endpoints are added manually\nurlpatterns = [\n    # Include the router generated URLs\n    path('', include(router.urls)),\n    # Authentication endpoints\n    path('register/', RegisterView.as_view(), name='register'),\n    path('login/', LoginView.as_view(), name='login'),",
        "detail": "backend.users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.users.urls",
        "description": "backend.users.urls",
        "peekOfCode": "urlpatterns = [\n    # Include the router generated URLs\n    path('', include(router.urls)),\n    # Authentication endpoints\n    path('register/', RegisterView.as_view(), name='register'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('me/', UserDetailView.as_view(), name='user-detail'),\n]",
        "detail": "backend.users.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "backend.users.views",
        "description": "backend.users.views",
        "peekOfCode": "class RegisterView(APIView):\n    \"\"\"View for user registration\"\"\"\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = RegisterSerializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.save()\n            return Response({\n                \"user\": UserSerializer(user).data,\n                \"message\": \"User created successfully\"",
        "detail": "backend.users.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "backend.users.views",
        "description": "backend.users.views",
        "peekOfCode": "class LoginView(APIView):\n    \"\"\"View for user login\"\"\"\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = LoginSerializer(data=request.data)\n        if serializer.is_valid():\n            email = serializer.validated_data['email']\n            password = serializer.validated_data['password']\n            user = authenticate(request, username=email, password=password)\n            if user is not None:",
        "detail": "backend.users.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "backend.users.views",
        "description": "backend.users.views",
        "peekOfCode": "class LogoutView(APIView):\n    \"\"\"View for user logout\"\"\"\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        logout(request)\n        return Response({\"message\": \"Logout successful\"})\nclass UserDetailView(APIView):\n    \"\"\"View for retrieving and updating user details\"\"\"\n    permission_classes = [IsAuthenticated]\n    parser_classes = [MultiPartParser, FormParser, JSONParser]",
        "detail": "backend.users.views",
        "documentation": {}
    },
    {
        "label": "UserDetailView",
        "kind": 6,
        "importPath": "backend.users.views",
        "description": "backend.users.views",
        "peekOfCode": "class UserDetailView(APIView):\n    \"\"\"View for retrieving and updating user details\"\"\"\n    permission_classes = [IsAuthenticated]\n    parser_classes = [MultiPartParser, FormParser, JSONParser]\n    def get(self, request):\n        # Add debugging\n        print(f\"User authenticated: {request.user.is_authenticated}\")\n        print(\n            f\"User: {request.user.username if request.user.is_authenticated else 'Anonymous'}\")\n        if not request.user.is_authenticated:",
        "detail": "backend.users.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "backend.users.views",
        "description": "backend.users.views",
        "peekOfCode": "class UserViewSet(viewsets.ModelViewSet):\n    \"\"\"ViewSet for managing users\"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [IsAuthenticated, IsAdminUser]\n    def get_queryset(self):\n        # Optionally filter users based on query parameters\n        queryset = super().get_queryset()\n        role = self.request.query_params.get('role')\n        status_param = self.request.query_params.get('status')",
        "detail": "backend.users.views",
        "documentation": {}
    },
    {
        "label": "NotificationView",
        "kind": 6,
        "importPath": "backend.users.views",
        "description": "backend.users.views",
        "peekOfCode": "class NotificationView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        # Fetch notifications for the user\n        notifications = [\n            {\"message\": \"John commented on your post.\",\n                \"timestamp\": \"2023-03-13T08:00:00Z\"},\n            {\"message\": \"Sarah liked your comment.\",\n                \"timestamp\": \"2023-03-12T10:00:00Z\"},\n            {\"message\": \"New user followed you.\",",
        "detail": "backend.users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.client.node_modules.flatted.python.flatted",
        "description": "frontend.client.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.client.node_modules.flatted.python.flatted",
        "description": "frontend.client.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.client.node_modules.flatted.python.flatted",
        "description": "frontend.client.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.client.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.client.node_modules.flatted.python.flatted",
        "description": "frontend.client.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.client.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]